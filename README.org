#+title: corefighter.el

[[https://travis-ci.org/akirak/corefighter.el][https://travis-ci.org/akirak/corefighter.el.svg?branch=master]]

Core Fighter (=corefighter.el=) lets you choose the next action in Emacs. With properly configured modules, it fetches information from external sources and arranges tasks for you.

* Features
- Multiple interfaces: Sidebar, helm, and no window
- Extensibility through modules
- List-oriented: Each module is a feed that provides links to items
* Prerequisites
- Emacs 25.1
- page-break-lines
- dash.el
- ov.el
* Configuration
An example configuration with =use-package= (and [[https://github.com/raxod502/straight.el][straight.el]]) is:

#+begin_src emacs-lisp
  (use-package corefighter
    ;; If you use straight.el
    :straight (corefighter :host github
                           :repo "akirak/corefighter.el"
                           :files
                           (:defaults
                            (:exclude "helm-corefighter.el")))
    :commands (corefighter-sidebar
               corefighter-next-item
               corefighter-next-module
               corefighter-first-item)
    :init
    (global-set-key (kbd "C-c h") #'corefighter-sidebar)
    (global-set-key (kbd "<S-f12>") #'corefighter-next-item)
    :config
    ;; Configure the module list
    (setq corefighter-modules
          '((corefighter-org-agenda)))
    (corefighter-load-modules))

  ;; helm-corefighter (optional)
  (use-package helm-corefighter
    :straight (helm-corefighter :host github :repo "akirak/corefighter.el"
                                :files ("helm-corefighter.el"))
    :commands (helm-corefighter))
#+end_src

If you don't use =use-package=, you probably can configure it like this:

#+begin_src emacs-lisp
  (autoload 'corefighter-sidebar "corefighter")
  (setq corefighter-modules
        '((corefighter-org-agenda)))
  (with-eval-after-load 'corefighter
    (corefighter-load-modules))

  ;; helm-corefighter (optional)
  (autoload 'helm-corefighter "helm-corefighter")
#+end_src

That is, you have to set =corefighter-modules= variable properly (which is described in the subsequent subsection) and then call =(corefighter-load-modules)= after that.

** Modules
See [[https://github.com/akirak/corefighter.el/wiki/Modules][this wiki page]].
* Usage
Run =corefighter-sidebar= to pop up a sidebar window.

There is also =helm-corefighter= command, which lets you browse items via Helm. In the Helm session, you can use =helm-persistent-action= (~C-j~) to preview an item without closing Helm.

You can even navigate to an item without any extra window using the following commands:

- =corefighter-next-item= visits the next item or the first item in the next module (or even another module if it doesn't have an item).
- =corefighter-next-module= visits the first item the next module.
- =corefighter-first-item= visits the first item in all modules.

** Keybindings inside the sidebar
The following keybindgs are available in the sidebar buffer:

- ~n~ / ~p~ to go to the next/previous link
- ~RET~ to follow the link, and ~SPC~ to open the link but remain in the sidebar window
- ~TAB~ / ~S-TAB~ to go to the next/previous section
- ~g~ to refresh
  - With a prefix, ~g~ reloads items in all modules.
- ~q~ to close the window
* Comparisons
** [[https://github.com/rakanalh/emacs-dashboard/][Dashboard]]
- Dashboard is a buffer displayed in a normal Emacs window. Core Fighter is a sidebar.
- While Dashboard allows you to freely layout individual sections (called widgets), the main dashboard application is less aware of its contents. Core Fighter is based on a list-oriented model of modules, so modules are more introspective.
** [[https://github.com/djcb/sauron][Sauron]]
Sauron is a background application to keep track of events in Emacs. In theory, Core Fighter can support features similar to Sauron by updating items in the background by watching external stuffs. Or maybe a Sauron module can be added to Core Fighter.

*** TODO Make Core Fighter more like Sauron
The following is a list of features to add to make Core Fighter compete with Sauron:

- [ ] Manage notifications
- [ ] A pop-up window to display urgent items/modules
- [ ] Integration with [[https://github.com/jwiegley/alert][alert]]
** [[https://common.yoke.io/][Yoke.io]]
Yoke.io is a web application that displays statuses of a bunch of external services. The module model of Core Fighter is analogous to the card model of Yoke.io. Core Fighter wishes to become Yoke.io for Emacs.
