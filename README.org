#+title: corefighter.el

[[https://travis-ci.org/akirak/corefighter.el.svg?branch=master]]

Core Fighter (=corefighter.el=) is a dashboard that sits beside an Emacs frame. It is a sidebar that displays links to dashboards. It is designed to be extensible by adding modules. 

* Features
- A dashboard as a sidebar: You can preview items without closing the dashboard window
- List-oriented: Each module is a feed that provides links to items
- Extensibility through modules
* Prerequisites
- Emacs 25.1
- page-break-lines
- dash.el
- ov.el
* Configuration
An example configuration with =use-package= (and [[https://github.com/raxod502/straight.el][straight.el]]) is:

#+begin_src emacs-lisp
  (use-package corefighter
    ;; If you use straight.el
    :straight (corefighter :host github
                           :repo "akirak/corefighter.el"
                           :files
                           (:defaults
                            (:exclude "helm-corefighter.el")))
    :commands (corefighter-sidebar)
    :config
    ;; Configure the module list
    (setq corefighter-modules
          '((corefighter-org-agenda)))
    (corefighter-load-modules))

  ;; helm-corefighter (optional)
  (use-package helm-corefighter
    :straight (helm-corefighter :host github :repo "akirak/corefighter.el"
                                :files ("helm-corefighter.el"))
    :commands (helm-corefighter))
#+end_src

If you don't use =use-package=, you probably can configure it like this:

#+begin_src emacs-lisp
  (autoload 'corefighter-sidebar "corefighter")
  (setq corefighter-modules
        '((corefighter-org-agenda)))
  (with-eval-after-load 'corefighter
    (corefighter-load-modules))

  ;; helm-corefighter (optional)
  (autoload 'helm-corefighter "helm-corefighter")
#+end_src

That is, you have to set =corefighter-modules= variable properly (which is described in the subsequent subsection) and then call =(corefighter-load-modules)= after that.

** Modules
A module in Core Fighter is a subclass of =corefighter-module=. 

To enable a module, add it to =corefighter-modules= variable. The variable is an alist whose item takes a form =(SYMBOL . PLIST)=, where =SYMBOL= is a symbol which represents the class of the module, and =PLIST= is a list of options passed to initialize an instance of the class.

Don't forget to call =corefighter-load-modules= after setting the variable.

*** Preconfigured modules
**** org-agenda-custom-commands
=corefighter-org-agenda= module displays a list of custom agenda commands.
**** Extra modules
[[https://github.com/akirak/corefighter-extras][corefighter-extras]] repository contains extra modules that require additional dependencies.
*** Writing your own module
To define a new module, create a class inherited from =corefighter-module=. The class must satisfy the following constraints:

- Initialize =title= slot, which is a string to represent the name of the module.
- Implement a generic method =corefighter-module-items=. It should take an optional boolean argument to represent if items should be reloaded.

An example is =corefighter-org-agenda=. As it is based on an object-oriented system of EIEIO, also refer to [[https://www.gnu.org/software/emacs/manual/html_node/eieio/][its documentation]]. [[https://github.com/akirak/corefighter-extras][corefighter-extras]] also provides examples written by the author of this package.
* Usage
Run =corefighter-sidebar= to pop up a sidebar window.

There is also =helm-corefighter= command, which lets you browse items via Helm. In the Helm session, you can use =helm-persistent-action= (~C-j~) to preview an item without closing Helm.

** Keybindings inside the sidebar
The following keybindgs are available in the sidebar buffer:

- ~n~ / ~p~ to go to the next/previous link
- ~RET~ to follow the link, and ~SPC~ to open the link but remain in the sidebar window
- ~TAB~ / ~S-TAB~ to go to the next/previous section
- ~g~ to refresh
  - With a prefix, ~g~ reloads items in all modules.
- ~q~ to close the window
* Comparisons
** [[https://github.com/rakanalh/emacs-dashboard/][Dashboard]]
- Dashboard is a buffer displayed in a normal Emacs window. Core Fighter is a sidebar.
- While Dashboard allows you to freely layout individual sections (called widgets), the main dashboard application is less aware of its contents. Core Fighter is based on a list-oriented model of modules, so modules are more introspective.
** [[https://github.com/djcb/sauron][Sauron]]
Sauron is a background application to keep track of events in Emacs. In theory, Core Fighter can support features similar to Sauron by updating items in the background by watching external stuffs. Or maybe a Sauron module can be added to Core Fighter.

*** TODO Make Core Fighter more like Sauron
The following is a list of features to add to make Core Fighter compete with Sauron:

- [ ] Manage notifications
- [ ] A pop-up window to display urgent items/modules
- [ ] Integration with [[https://github.com/jwiegley/alert][alert]]
** [[https://common.yoke.io/][Yoke.io]]
Yoke.io is a web application that displays statuses of a bunch of external services. The module model of Core Fighter is analogous to the card model of Yoke.io. Core Fighter wishes to become Yoke.io for Emacs.
